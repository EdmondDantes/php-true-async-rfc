@startuml

@startmindmap
*[#lightblue] Do you want to create a coroutine?
**[#lightgreen] Use spawn functionName(...)
**[#87CEEB] Do you want to create a coroutine from a closure?
***[#lightgreen] Use spawn { ... }
**[#87CEEB] Do you want structured concurrency?
***[#lightgreen] Use async $scope { ... }

*[#lightblue] Do you want to wait for a result?
**[#lightgreen] Use await <Async\Awaitable>
**[#87CEEB] Do you want to wait for multiple tasks?
***[#lightgreen]: Use **TaskGroup**

$taskGroup = new Async\TaskGroup()
spawn with $taskGroup ...
await $taskGroup
;
**[#87CEEB] Do you want to wait for multiple tasks with results?
***[#lightgreen] Use new Async\TaskGroup(captureResults: true)
**[#87CEEB] Do you want to wait for the first completed task (race)?
***[#lightgreen] Use TaskGroup->race() or TaskGroup->firstResult()
**[#87CEEB] Do you want to wait with cancellation?
***[#lightgreen] Use await ... until ...

*[#lightblue] Do you need to cancel tasks?
**[#87CEEB] Single coroutine?
***[#lightgreen] Use Coroutine::cancel()
**[#87CEEB] All tasks in a scope?
***[#lightgreen] Use Scope->cancel() or Scope->dispose()
**[#87CEEB] All tasks in a TaskGroup?
***[#lightgreen] Use TaskGroup->dispose() or TaskGroup->cancel()
**[#87CEEB] Timed or safe disposal of Scope?
***[#lightgreen] Use Scope->disposeSafely() or Scope->disposeAfterTimeout(int)

*[#lightblue] Do you need error handling?
**[#87CEEB] Handle coroutine exceptions?
***[#lightgreen] Use try { await $coroutine } catch(...) { ... }
**[#87CEEB] Handle all exceptions in a Scope?
***[#lightgreen] Use Scope->setExceptionHandler()

*[#lightblue] Do you need graceful shutdown?
**[#lightgreen] Use Async\gracefulShutdown()

*[#lightblue] Protect critical sections?
**[#lightgreen] Use Async\protect(\Closure $criticalSection)

*[#lightblue] Do you want to execute logic on completion?
**[#lightgreen] Use Coroutine::onCompletion()
**[#87CEEB] Need a fallback?
***[#lightgreen] Use a finally block

*[#lightblue] Do you need to pass data across coroutine boundaries?
**[#lightgreen] Use Async\Context, Async\currentContext()

*[#lightblue] Do you need context inheritance?
**[#lightgreen] Use Scope::inherit()

*[#lightblue] Are you managing implicit coroutines or worried about zombie coroutines?
**[#87CEEB] Need safe or timed disposal?
***[#lightgreen] Use Scope::disposeSafely() or Scope::disposeAfterTimeout()
@endmindmap

@enduml
