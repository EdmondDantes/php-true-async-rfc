@startuml

@startmindmap
*[#lightblue] Creating Coroutines
**[#lightgreen] spawn
**[#FFD700]  Custom spawn behavior: spawn with
***[#lightgreen] SpawnStrategy interface

*[#lightblue] Switching to Scheduler
**[#lightgreen] suspend
*[#lightblue] Structured Concurrency
**[#FFD700] Grouping tasks
***[#lightgreen] new TaskGroup() + await TaskGroup
**[#FFD700] The parent waits for all child tasks
***[#lightgreen] new Scope + await Scope
**[#FFD700] A hierarchy
***[#lightgreen] Scope::inherit()
*[#lightblue] Waiting for Results
**[#lightgreen] await <Async\Awaitable>
**[#FFD700] Waiting for multiple tasks
***[#lightgreen] await TaskGroup
**[#FFD700] Waiting for all child tasks
***[#lightgreen] await Scope
**[#FFD700] Waiting for first tasks (race)
***[#lightgreen] TaskGroup::race() or TaskGroup::firstResult()
**[#FFD700] Waiting with cancellation
***[#lightgreen]: await + until

await $coroutine until $cancellation;
*[#lightblue] Handling Exceptions
**[#FFD700] Handling exceptions inside coroutine
***[#lightgreen] try-catch with await
**[#FFD700] Handling exceptions in grouped tasks
***[#lightgreen] Scope Exception Handler
**[#FFD700] Handling exceptions as a supervisor
***[#lightgreen] Child Scope Exception Handler
*[#lightblue] Task Grouping
**[#FFD700] Explicit task grouping
***[#lightgreen] TaskGroup
**[#FFD700] Shared task space for spawn expression
***[#lightgreen] Scope
**[#FFD700] Linking PHP object with coroutines
***[#lightgreen]: Scope or/and TaskGroup

class Some {
	public function __construct() {
		$this->scope = new Scope()
	}

	public function __destruct() {
		$this->scope->dispose()
	}
};
*[#lightblue] Task Cancellation
**[#FFD700] Cancel a running coroutine
***[#lightgreen] Coroutine::cancel()
**[#FFD700] Cancel all child tasks in scope
***[#lightgreen] Scope::cancel()
**[#FFD700] Cancel tasks in TaskGroup
***[#lightgreen] TaskGroup::cancel() / TaskGroup::dispose()
**[#FFD700] Cancel all child tasks with warning
***[#lightgreen] Scope::dispose()
**[#FFD700] Cancel all child tasks with zombie coroutine
***[#lightgreen] Scope::disposeSafely()
*[#lightblue] Context Management
**[#FFD700] Passing data across coroutine boundaries
***[#lightgreen] Async\Context
**[#FFD700] Inheriting context across scopes
***[#lightgreen] Scope Inheritance

*[#lightblue] Completion Handlers
**[#lightgreen] Coroutine::onFinally()
**[#lightgreen] Scope::onFinally()
**[#lightgreen] TaskGroup::onFinally()

*[#lightblue] Error Detection
**[#lightgreen] Zombie Coroutine Policy

@endmindmap

@enduml
